{"version":3,"sources":["webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/components/all-mails-list/all-mails-list.graphql.ts","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/components/all-mails-list/all-mails-list.component.html","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/components/all-mails-list/all-mails-list.component.ts","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/components/mail-detail/mail-detail.graphql.ts","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/components/mail-detail/mail-detail.component.html","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/components/mail-detail/mail-detail.component.ts","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/providers/routing/mail-detail/mail-detail-resolver.graphql.ts","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/providers/routing/mail-detail/mail-detail-resolver.ts","webpack:///src/extensions/a9af16c80b8350127fca1c5ca0d099380624f452297f6cb10aeadc83972207c1/mailsubscription-ui-lazy.module.ts"],"names":["GET_ALL_EMAILS","DELETE_EMAIL","dataService","modalService","notificationService","apollo","router","route","super","searchTerm","setQueryFn","args","this","query","data","SubscriptionEmails","skip","take","options","filter","email","contains","value","sort","updatedAt","Desc","ngOnInit","valueChanges","pipe","debounceTime","takeUntil","destroy$","subscribe","refresh","watchQuery","variables","exportToCsv","items","id","ids","dialog","title","buttons","type","label","returnValue","switchMap","response","mutate","success","entity","err","error","setPageNumber","setItemsPerPage","UPDATE_EMAIL","CREATE_EMAIL","serverConfigService","formBuilder","changeDetector","which","detailForm","group","required","url","init","destroy","addNew","result","markAsPristine","markForCheck","saveChanges","dirty","input","mapTo","of","formValue","patchValue","GET_EMAIL","__typename","createdAt","mapStream","SubscriptionEmail","MailSubscriptionUIModule","mailDetailBreadcrumb","resolved","map","link","forChild","path","pathMatch","component","breadcrumb","resolve"],"mappings":"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","file":"x","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nimport { MAIL_SUBSCRIPTION_FRAGMENT } from '../../common/fragments.graphql';\r\n\r\nexport const GET_ALL_EMAILS = gql`\r\n    query GetAllEmails($options: EmailListOptions){\r\n\t\tSubscriptionEmails(options: $options){\r\n\t\t\titems{\r\n\t\t\t...SubscribedEmails\r\n\t\t\t}\r\n\t\t\ttotalItems\r\n       }\r\n    }\r\n\t${MAIL_SUBSCRIPTION_FRAGMENT}\r\n`;\r\n\r\n\r\nexport const DELETE_EMAIL = gql`\r\n   mutation DeleteEmail($input:[ID!]!){\r\n      deleteSubscriptionEmail(id:$input){\r\n\t     ...SubscribedEmails \r\n\t  }\r\n   }\r\n   ${MAIL_SUBSCRIPTION_FRAGMENT}\r\n`;","<vdr-action-bar>\r\n    <vdr-ab-left>\r\n        <input\r\n            type=\"text\"\r\n            name=\"searchTerm\"\r\n\t\t\t[formControl]=\"searchTerm\"\r\n            [placeholder]=\"'vdr-subscription-plugin.search-by-email' | translate\"\r\n            class=\"clr-input search-input\"\r\n        />\r\n    </vdr-ab-left>\r\n    <vdr-ab-right>\r\n        <vdr-action-bar-items locationId=\"email-list\"></vdr-action-bar-items>\r\n        <a href=\"javascript:void(0)\" class=\"btn btn-primary\" id=\"downloadbtn\" (click)=\"downloadcsv()\" *vdrIfPermissions=\"'CreateSettings'\">\r\n            <clr-icon shape=\"download-cloud\"></clr-icon>\r\n\t\t\t{{ 'vdr-subscription-plugin.download-csv' | translate }}\r\n        </a>\r\n\t\t<a class=\"btn btn-primary\" id=\"createbtn\" [routerLink]=\"['./create']\" *vdrIfPermissions=\"'CreateSettings'\">\r\n            <clr-icon shape=\"plus\"></clr-icon>\r\n\t\t\t{{ 'vdr-subscription-plugin.create-new-email' | translate }}\r\n        </a>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<vdr-data-table\r\n    [items]=\"items$ | async\"\r\n    [itemsPerPage]=\"itemsPerPage$ | async\"\r\n    [totalItems]=\"totalItems$ | async\"\r\n    [currentPage]=\"currentPage$ | async\"\r\n    (pageChange)=\"setPageNumber($event)\"\r\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\r\n>\r\n\t<vdr-dt-column>{{ 'vdr-subscription-plugin.email' | translate }}</vdr-dt-column>\r\n\t<vdr-dt-column>{{ 'vdr-subscription-plugin.created' | translate }}</vdr-dt-column>\r\n\t<vdr-dt-column>{{ 'vdr-subscription-plugin.updated' | translate }}</vdr-dt-column>\r\n    <vdr-dt-column></vdr-dt-column>\r\n\t<vdr-dt-column></vdr-dt-column>\r\n    <ng-template let-email=\"item\">\r\n\t\t<td class=\"left align-middle\">{{ email.email }}</td>\r\n\t\t<td class=\"left align-middle\">{{ email.createdAt | date: 'longDate' }}</td>\r\n\t\t<td class=\"left align-middle\">{{ email.updatedAt | date: 'longDate' }}</td>\r\n\t\t<td class=\"right align-middle\" *vdrIfPermissions=\"'UpdateSettings'\">\r\n            <vdr-table-row-action\r\n                iconShape=\"edit\"\r\n                [label]=\"'common.edit' | translate\"\r\n                [linkTo]=\"['/extensions', 'subscribedmails', email.id]\"\r\n            ></vdr-table-row-action>\r\n        </td>\r\n\t\t\r\n\t\t<td class=\"right align-middle\" *vdrIfPermissions=\"'DeleteSettings'\">\r\n            <vdr-dropdown>\r\n                <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\r\n                    {{ 'common.actions' | translate }}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <vdr-dropdown-menu vdrPosition=\"bottom-right\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"delete-button\"\r\n                        (click)=\"deleteEmail(email.id)\"\r\n                        vdrDropdownItem\r\n                    >\r\n                        <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\r\n                        {{ 'common.delete' | translate }}\r\n                    </button>\r\n                </vdr-dropdown-menu>\r\n            </vdr-dropdown>\r\n        </td>\r\n\t\t\r\n    </ng-template>\r\n</vdr-data-table>\r\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormControl } from '@angular/forms';\r\nimport { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { BaseListComponent, DataService, NotificationService, ModalService  } from '@vendure/admin-ui/core';\r\nimport { merge, Subscription } from 'rxjs';\r\nimport { Apollo } from 'apollo-angular';\r\n\r\nimport { SortOrder } from '../../generated-types';\r\nimport { EMPTY, Observable } from 'rxjs';\r\nimport { debounceTime, takeUntil, switchMap } from 'rxjs/operators';\r\nimport { CsvDataService } from '../../common/export-as-csv';\r\n\r\nimport { \r\n  GetAllEmailsQuery,\r\n  SubscribedEmails,\r\n  GetAllEmailsQueryVariables,\r\n  DeleteEmail\r\n} from '../../generated-types';\r\n\r\nimport { GET_ALL_EMAILS, DELETE_EMAIL } from './all-mails-list.graphql';\r\n\r\n@Component({\r\n    selector: 'vdr-all-mails-list',\r\n    templateUrl: './all-mails-list.component.html',\r\n    styleUrls: ['./all-mails-list.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class AllMailsListComponent extends BaseListComponent<\r\n    GetAllEmailsQuery,\r\n\tSubscribedEmails.Fragment,\r\n    GetAllEmailsQueryVariables\r\n> implements OnInit {\r\n    searchTerm = new FormControl('');\r\n\tSubscriptionEmails: any;\r\n\tprivate querySubscription: Subscription;\r\n\r\n    constructor(\r\n\t   private dataService: DataService,\r\n       private modalService: ModalService,\r\n       private notificationService: NotificationService,\r\n       private apollo: Apollo,\t   \r\n\t   router: Router, \r\n\t   route: ActivatedRoute,\r\n\t) {\r\n        super(router, route);\r\n        super.setQueryFn(\r\n            (...args: any[]) => this.dataService.query(GET_ALL_EMAILS,args),\r\n            (data) => data.SubscriptionEmails,\r\n\t\t\t(skip, take) => ({\r\n                options: {\r\n                    skip,\r\n                    take,\r\n                    filter: {\r\n                        email: {\r\n                            contains: this.searchTerm.value,\r\n                        },\r\n                    },\r\n\t\t\t\t\tsort: {\r\n                        updatedAt: SortOrder.Desc,\r\n                    },\r\n                },\r\n            }),\r\n        );\r\n    }\r\n\t\r\n\tngOnInit() {\r\n        super.ngOnInit();\r\n        this.searchTerm.valueChanges\r\n            .pipe(\r\n                debounceTime(250),\r\n                takeUntil(this.destroy$),\r\n            )\r\n            .subscribe(() => {\r\n\t\t\t\tthis.refresh();\r\n\t\t\t});\r\n    }\r\n\t\r\n\t\r\n\tdownloadcsv(){\r\n\t  let args: any[] = [];\r\n\t  this.apollo.watchQuery<any>({\r\n         query: GET_ALL_EMAILS,\r\n\t\t variables: args\r\n      }).valueChanges.subscribe((data) => {\r\n\t\t  CsvDataService.exportToCsv('danfe-subscribed-emails.csv', data.data.SubscriptionEmails.items);\r\n      });\r\n\t  \r\n\t   \r\n\t}\r\n\t\r\n\tdeleteEmail(id: string) {\r\n\t\tlet ids:string[] =[id];\r\n        this.modalService\r\n            .dialog({\r\n                title: _('vdr-subscription-plugin.confirm-delete-email'),\r\n                buttons: [\r\n                    { type: 'secondary', label: _('common.cancel') },\r\n                    { type: 'danger', label: _('common.delete'), returnValue: true },\r\n                ],\r\n            })\r\n            .pipe(\r\n                switchMap(response => (response ? this.dataService.mutate<DeleteEmail.Mutation,DeleteEmail.Variables>(DELETE_EMAIL,{\"input\":ids}) : EMPTY)),\r\n            )\r\n            .subscribe(\r\n                () => {\r\n                    this.notificationService.success(_('common.notify-delete-success'), {\r\n                        entity: 'Email',\r\n                    });\r\n                    this.refresh();\r\n                },\r\n                err => {\r\n                    this.notificationService.error(_('common.notify-delete-error'), {\r\n                        entity: 'Email',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n}\r\n","import gql from 'graphql-tag';\r\n\r\nimport { MAIL_SUBSCRIPTION_FRAGMENT } from '../../common/fragments.graphql';\r\n\r\nexport const UPDATE_EMAIL = gql`\r\n    mutation UpdateEmail($input: [EmailUpdateInput!]!) {\r\n        updateSubscriptionEmail(input: $input) {\r\n            ...SubscribedEmails\r\n        }\r\n    }\r\n    ${MAIL_SUBSCRIPTION_FRAGMENT}\r\n`;\r\n\r\nexport const CREATE_EMAIL = gql`\r\n    mutation CreateEmail($input: [EmailAddInput!]!) {\r\n        addSubscriptionEmail(input: $input) {\r\n            ...SubscribedEmails\r\n        }\r\n    }\r\n    ${MAIL_SUBSCRIPTION_FRAGMENT}\r\n`;","<vdr-action-bar>\r\n    <vdr-ab-right>\r\n        <button\r\n            class=\"btn btn-primary\"\r\n\t\t\tid=\"custbtn\"\r\n            *ngIf=\"which; else updateButton\"\r\n            (click)=\"create()\"\r\n            [disabled]=\"!(detailForm.valid && detailForm.dirty)\"\r\n        >\r\n            {{ 'common.create' | translate }}\r\n        </button>\r\n        <ng-template #updateButton>\r\n            <button\r\n                class=\"btn btn-primary\"\r\n\t\t\t\tid=\"editbtn\"\r\n                (click)=\"save()\"\r\n                [disabled]=\"!(detailForm.valid && detailForm.dirty)\"\r\n            >\r\n                {{ 'common.update' | translate }}\r\n            </button>\r\n        </ng-template>\r\n    </vdr-ab-right>\r\n</vdr-action-bar>\r\n\r\n<form class=\"form\" [formGroup]=\"detailForm\">\r\n    <vdr-form-field [label]=\"'vdr-subscription-plugin.email-label' | translate\" for=\"email\">\r\n        <input id=\"email\" type=\"email\" formControlName=\"email\" [readonly]=\"!'UpdateSettings'\" />\r\n    </vdr-form-field>\r\n</form>","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n    BaseDetailComponent,\r\n    DataService,\r\n    NotificationService,\r\n    ServerConfigService,\r\n} from '@vendure/admin-ui/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { filter, map, mapTo, switchMap } from 'rxjs/operators';\r\n\r\nimport { \r\n   CreateEmail,\r\n   SubscribedEmailsFragment,\r\n   UpdateEmail,\r\n   EmailAddInput,\r\n   EmailUpdateInput\r\n} from '../../generated-types';\r\n\r\nimport { CREATE_EMAIL,UPDATE_EMAIL } from './mail-detail.graphql';\r\n\r\n@Component({\r\n    selector: 'vdr-subscription-mail-detail',\r\n    templateUrl: './mail-detail.component.html',\r\n    styleUrls: ['./mail-detail.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n})\r\n\r\nexport class MailDetailComponent extends BaseDetailComponent<SubscribedEmailsFragment>\r\n    implements OnInit, OnDestroy {\r\n    detailForm: FormGroup;\r\n\twhich = false;\r\n\t\r\n\tconstructor(\r\n        route: ActivatedRoute,\r\n        router: Router,\r\n        serverConfigService: ServerConfigService,\r\n        private formBuilder: FormBuilder,\r\n        protected dataService: DataService,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private notificationService: NotificationService,\r\n    ) {\r\n        super(route, router, serverConfigService, dataService);\r\n        \r\n\t\tthis.detailForm = this.formBuilder.group({\r\n            email: ['', Validators.required]\r\n        });\r\n\t\t\r\n    }\r\n\t\r\n\tngOnInit() {\r\n\t\tif(this.router.url!='/extensions/subscribedmails/create'){\r\n\t\t  this.which=false;\r\n\t\t  this.init();\r\n\t\t}else{\r\n\t\t   this.which=true;\r\n\t\t}\r\n    }\r\n\t\r\n\tngOnDestroy() {\r\n      this.destroy();\r\n    }\r\n\t\r\n\tcreate(){\r\n\t   this.addNew()\r\n            .pipe(filter(result => !!result))\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success('common.notify-create-success', {\r\n                        entity: 'Email',\r\n                    });\r\n                },\r\n                () => {\r\n                    this.notificationService.error('common.notify-create-error', {\r\n                        entity: 'Email',\r\n                    });\r\n                },\r\n            );\r\n\t}\r\n\t\r\n\tsave() {\r\n        this.saveChanges()\r\n            .pipe(filter(result => !!result))\r\n            .subscribe(\r\n                () => {\r\n                    this.detailForm.markAsPristine();\r\n                    this.changeDetector.markForCheck();\r\n                    this.notificationService.success('common.notify-update-success', {\r\n                        entity: 'Email',\r\n                    });\r\n                },\r\n                () => {\r\n                    this.notificationService.error('common.notify-update-error', {\r\n                        entity: 'Email',\r\n                    });\r\n                },\r\n            );\r\n    }\r\n\t\r\n\tprivate addNew(): Observable<boolean>{\r\n\t   if (this.detailForm.dirty) {\r\n            const formValue = this.detailForm.value;\r\n            const input: EmailAddInput[] = [{\r\n                email: formValue.email,\r\n            }];\r\n            return this.dataService\r\n                .mutate<CreateEmail.Mutation,CreateEmail.Variables>(CREATE_EMAIL, {\r\n                    input,\r\n                })\r\n                .pipe(mapTo(true));\r\n        } else {\r\n            return of(false);\r\n        }\r\n\t}\r\n\t\r\n\tprivate saveChanges(): Observable<boolean> {\r\n        if (this.detailForm.dirty) {\r\n            const formValue = this.detailForm.value;\r\n            const input: EmailUpdateInput[] = [{\r\n                id: this.id,\r\n                email: formValue.email,\r\n            }];\r\n            return this.dataService\r\n                .mutate<UpdateEmail.Mutation,UpdateEmail.Variables>(UPDATE_EMAIL, {\r\n                    input,\r\n                })\r\n                .pipe(mapTo(true));\r\n        } else {\r\n            return of(false);\r\n        }\r\n    }\r\n\t\r\n\tprotected setFormValues(entity: SubscribedEmailsFragment) {\r\n\t\t\r\n\t\t  this.detailForm.patchValue({\r\n            email: entity.email,\r\n          });\r\n\t}\r\n    \r\n}\r\n","import gql from 'graphql-tag';\r\n\r\nimport { MAIL_SUBSCRIPTION_FRAGMENT } from '../../../common/fragments.graphql';\r\n\r\nexport const GET_EMAIL = gql`\r\n  query GetEmail($id: ID!) {\r\n    SubscriptionEmail(id: $id) {\r\n      ...SubscribedEmails\r\n    }\r\n  }\r\n  ${MAIL_SUBSCRIPTION_FRAGMENT}\r\n`;","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DataService, BaseEntityResolver } from '@vendure/admin-ui/core';\r\nimport { take } from 'rxjs/operators';\r\nimport { GET_EMAIL } from './mail-detail-resolver.graphql';\r\n\r\nimport { \r\n  GetEmailQuery,\r\n  SubscribedEmailsFragment,\r\n  GetEmailQueryVariables\r\n} from '../../../generated-types';\r\n\r\n@Injectable()\r\nexport default class MailDetailResolver extends BaseEntityResolver<\r\n  SubscribedEmailsFragment\r\n> {\r\n  constructor(router: Router, dataService: DataService) {\r\n    super(\r\n      router,\r\n      {\r\n        __typename: 'Email',\r\n        id: '',\r\n\t\temail:'',\r\n\t\tcreatedAt: '',\r\n\t\tupdatedAt: ''\r\n      },\r\n      (id) =>\r\n        dataService.query<GetEmailQuery, GetEmailQueryVariables>(GET_EMAIL, {\r\n            id: id\r\n        })\r\n        .mapStream((data) => data.SubscriptionEmail)\r\n    );\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule, createResolveData } from '@vendure/admin-ui/core';\r\nimport { AllMailsListComponent } from './components/all-mails-list/all-mails-list.component';\r\nimport { MailDetailComponent } from './components/mail-detail/mail-detail.component';\r\n\r\nimport MailDetailResolver from './providers/routing/mail-detail/mail-detail-resolver';\r\nimport { SubscribedEmailsFragment } from './generated-types';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    RouterModule.forChild([\r\n\t{\r\n      path: '',\r\n      pathMatch: 'full',\r\n      component: AllMailsListComponent ,\r\n      data: { breadcrumb: 'Subscribed Mails' },\r\n    },\r\n\t{\r\n\t  path: 'create',\r\n      component: MailDetailComponent,\r\n      data: {breadcrumb: [\r\n             {\r\n                label: 'Subscribed Mails',\r\n                link: ['/extensions', 'subscribedmails'],\r\n             },\r\n             {\r\n                label: 'Create Email',\r\n                link: [],\r\n             }\r\n\t       ]\r\n\t     } \r\n\t},\r\n    {\r\n       path: ':id',\r\n       component: MailDetailComponent,\r\n       resolve: createResolveData(MailDetailResolver),\r\n       data: { breadcrumb: mailDetailBreadcrumb },\r\n    }\r\n\t]),\r\n  ],\r\n  declarations: [\r\n    AllMailsListComponent,\r\n\tMailDetailComponent\r\n  ],\r\n  providers:[MailDetailResolver],\r\n})\r\nexport class MailSubscriptionUIModule {}\r\n\r\nexport function mailDetailBreadcrumb(resolved: { entity: Observable<SubscribedEmailsFragment> }) {\r\n\treturn resolved.entity.pipe(\r\n        map(entity => [\r\n            {\r\n                label: 'Subscribed Mails',\r\n                link: ['/extensions', 'subscribedmails'],\r\n            },\r\n            {\r\n                label: `${entity.email}`,\r\n                link: [],\r\n            },\r\n        ]),\r\n    );\r\n}\r\n"]}